-- TABLE PHONG KHAM
CREATE TABLE IF NOT EXISTS clinics (
  `clinic_id` INTEGER NOT NULL AUTO_INCREMENT,
  `clinic_name` VARCHAR(20) NOT NULL,
  `type` ENUM('CLINIC', 'FACILITY', 'HOPITAL', 'OTHER') DEFAULT 'CLINIC',
  `clinic_img` TEXT,
  `clinic_img_name` TEXT,
  `clinic_desc` TEXT,
  `district_code` VARCHAR(30) NOT NULL,
  `district_name` VARCHAR(60) NOT NULL,
  `provice_code` VARCHAR(30) NOT NULL,
  `provice_name` VARCHAR(60) NOT NULL,
  `ward_code` VARCHAR(30) NOT NULL,
  `ward_name` VARCHAR(60) NOT NULL,
  `slug` VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (clinic_id)
) ENGINE = InnoDB;

-- TABLE ANH CUA PHONG KHAM
CREATE TABLE IF NOT EXISTS clinic_img (
  `clinic_img_id` INTEGER NOT NULL AUTO_INCREMENT,
  `clinic_id` INTEGER NOT NULL,
  `clinic_img_value` TEXT,
  `clinic_img_name` TEXT,
  PRIMARY KEY (`clinic_img_id`),
  FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB;

-- TABLE CHUYEN KHOA
CREATE TABLE IF NOT EXISTS specialties (
  `specialty_id` INTEGER NOT NULL AUTO_INCREMENT,
  `specialty_name` VARCHAR(50) NOT NULL,
  `specialty_img` TEXT,
  `specialty_img_name` TEXT,
  `specialty_desc` TEXT,
  `slug` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (specialty_id)
) ENGINE = InnoDB;

-- TABLE USERS
CREATE TABLE IF NOT EXISTS users (
  `user_id` INTEGER NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(20) NOT NULL,
  `last_name` VARCHAR(20) NOT NULL,
  `email` VARCHAR(30) UNIQUE NOT NULL,
  `password` VARCHAR(80) NULL,
  `phone` VARCHAR(10) UNIQUE NULL,
  `year_of_brith` VARCHAR(4) DEFAULT '0000',
  `address` TEXT,
  `avatar` TEXT,
  `file_name_avatar` TEXT,
  `clinic_id` INTEGER DEFAULT NULL,
  `specialty_id` INTEGER DEFAULT NULL,
  `gender` ENUM('MALE', 'FEMALE') NOT NULL,
  `doctor_position` ENUM(
    'NONE',
    'MASTER',
    'DOCTOR',
    'ASSOCIATE_PROFESSOR',
    'PROFESSOR'
  ) DEFAULT NULL,
  `is_verify` BOOLEAN DEFAULT 0,
  `role` ENUM('ADMIN', 'DOCTOR', 'CUSTOMER', 'CLINIC') DEFAULT 'CUSTOMER',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (specialty_id) REFERENCES specialties(specialty_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (user_id)
) ENGINE = InnoDB;

-- TABLE CONG VIEC CUA BAC SI
CREATE TABLE IF NOT EXISTS works (
  `work_id` INTEGER NOT NULL AUTO_INCREMENT,
  `desc` TEXT,
  `key` VARCHAR(10) NOT NULL UNIQUE,
  `value` VARCHAR(20) NOT NULL UNIQUE,
  PRIMARY KEY (work_id)
) ENGINE = InnoDB;

-- TABLE LICH TRINH CUA BAC SI
CREATE TABLE IF NOT EXISTS schedules (
  `schedule_day` DATE,
  `doctor_id` INTEGER DEFAULT NULL,
  `work_id` INTEGER DEFAULT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (doctor_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (work_id) REFERENCES works(work_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (doctor_id, work_id)
) ENGINE = InnoDB;

-- TABLE TRANG THAI
CREATE TABLE IF NOT EXISTS statuses (
  `status_id` INTEGER NOT NULL AUTO_INCREMENT,
  `type` ENUM('BOOKING', 'HISTORY') DEFAULT 'BOOKING',
  `desc` TEXT,
  `key` VARCHAR(5) NOT NULL UNIQUE,
  `value` VARCHAR(20) NOT NULL UNIQUE,
  PRIMARY KEY (status_id)
) ENGINE = InnoDB;

-- TABLE SERVICES
CREATE TABLE IF NOT EXISTS services (
  `service_id` INTEGER NOT NULL AUTO_INCREMENT,
  `service_name` VARCHAR(50) UNIQUE NOT NULL,
  `service_img` TEXT,
  `service_img_name` TEXT,
  `service_desc` TEXT,
  `service_price` INTEGER NOT NULL CHECK (service_price > 10),
  `clinic_id` INTEGER NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (service_id)
) ENGINE = InnoDB;

-- TABLE BOOKINGS
CREATE TABLE IF NOT EXISTS bookings (
  `reason_exam` TEXT,
  `service_id` INTEGER DEFAULT NULL,
  `doctor_id` INTEGER DEFAULT NULL,
  `work_id` INTEGER DEFAULT NULL,
  `booking_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (service_id) REFERENCES services(service_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (doctor_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (work_id) REFERENCES works(work_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (service_id, doctor_id, work_id)
) ENGINE = InnoDB;

-- TABLE HISTORIES
CREATE TABLE IF NOT EXISTS histories (
  `history_desc` TEXT,
  `service_id` INTEGER DEFAULT NULL,
  `doctor_id` INTEGER DEFAULT NULL,
  `work_id` INTEGER DEFAULT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (service_id) REFERENCES services(service_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (doctor_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (work_id) REFERENCES works(work_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (service_id, doctor_id, work_id)
) ENGINE = InnoDB;

-- TABLE TOKEN
CREATE TABLE IF NOT EXISTS tokens (
  `user_id` INTEGER NOT NULL,
  `token` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (user_id)
) ENGINE = InnoDB;

-- TABLE SESSIONS
CREATE TABLE IF NOT EXISTS sessions (
  `user_id` INTEGER NOT NULL,
  `refresh_token` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (user_id)
) ENGINE = InnoDB;